# -*- coding: utf-8 -*-
"""LinearAlgebra.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J5rfm3QcIuVJj8rn-m7EEyT3ocrcUxgl

#Actual Code#
"""

def M(i:int, j:int, A:list) -> list:
  return [row[:j] + row[j+1:] for row in (A[:i] + A[i+1:])]

def det(A : list) -> int:
  if len(A) == 0:
    return 1
  if len(A) != len(A[0]):
    raise Exception("Array given is not an nxn matrix")
  if len(A) == 1:
    return A[0][0]
  if len(A) == 2:
    return (A[0][0] * A[1][1]) - (A[0][1] * A[1][0])
  
  res:int = 0
  j:int = 0
  for i in range(len(A)):
    res += A[i][j] * (-1)**(i) * det(M(i, j, A))    # not i + 1 because index starts at 0

  return res

"""
# Test Code #

Struct that holds results from testing
"""

from dataclasses import dataclass
@dataclass
class Result:
    success: bool
    calculated_val: float
    true_val: float

"""
Tests det function   
param:: A:list - 2D n x n matrix 
"""

import numpy as np

def test_det(A:list) -> Result:
  calc_val:int = det(A)
  actual_val:int = int(np.linalg.det(np.array(A)))

  if (calc_val == actual_val):
    return Result(True, calc_val, actual_val)
  else:
    return Result(False, calc_val, actual_val)

"""
Tests det function  
param:: A:list - 2D n x n matrix
"""

def test_M(A:list, i:int, j:int, true_val:list) -> Result:
  calc_val:list = M(i, j, A)
  return Result(calc_val == true_val, calc_val, true_val)

"""
Main Test Runner
param:: A:list - 2D nxn matrix   
param:: M_params - params needed to test M function
"""

def run_test(function:str, A:list, **M_params) -> None:
  if (function == "det"):
    result = test_det(A)
  elif (function == "M"):  
    result = test_M(A, M_params["i"], M_params["j"], M_params["expected"])
  else:
    print("INVALID FUNCTION TO TEST")
    raise Exception("Invalid function to test, function '" + function + "' does not exist")

  if result.success:
    print("[Test Passed]")
  else:
    raise Exception(
        "\n!![Test Failure]!!\n" +
        "-------------------\n" +
        "Expected:: " + str(result.true_val) + "\n" +
        "Got:: " + str(result.calculated_val) + "\n" +
        "-------------------"
    )

"""# Tests #"""

A = [
  [1, 2, 3], 
  [3, 0 , -1],
  [4, -2, 1]   
]

expected = [
    [0, -1], 
    [-2, 1]
]

run_test("M", A, i = 0, j = 0, expected = expected)

A = [
    [50, 29, 12], 
    [30, 44, 20],
    [0, 55, 12] 
]
run_test("det", A)

A = [
    [50, 29], 
    [30, 44]
]
run_test("det", A)

A = [
    [ 2 ]
]
run_test("det", A)

A = [
    [1, 2]
]
try:
  result:list = det(A)
  raise Exception(
        "\n!![Test Failure]!!\n" +
        "-------------------\n" +
        "Expected:: thrown exception \n" +
        "Got:: " + str(result) + "\n" +
        "-------------------"
    )
except:
  print("[Test Passed]")

"""
#Main#
"""

# put your A x A matric here
A = [
    [50, 29, 12], 
    [30, 44, 20],
    [0, 55, 12] 
]

print(det(A))